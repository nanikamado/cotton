data E
data T(A, B, C) forall { A, B, C }

type Tree = E | T[A, Tree[A], Tree[A]] forall { A }

empty : Bool = False
empty : Tree[A] forall { A } = E
empty : List[A] forall { A } = Nil
empty : String = ""
empty : I64 = 0

interface Empty {
    empty : Self
}

rfold_with_empty : List[A] -> (B -> A -> B) -> B forall { A, B : Empty } =
    | Nil, _ => empty
    | h /\ t, f => t.rfold_with_empty(f).f(h)

local_append : List[A] -> List[A] -> List[A] forall { A } =
    | h /\ t, l => h /\ t.local_append(l)
    | Nil, l => l

local_append : I64 -> I64 -> I64 = (+)

local_append : String -> String -> String = (<>)

interface local_append {
    local_append : Self -> Self -> Self
}

concat : List[A] -> A forall { A : Empty & local_append } =
    | l => l.rfold_with_empty(| a, b => b.local_append(a))

main : () -> () =
    | () => do
        ("a" /\ "b" /\ "c" /\ Nil)
            .concat
            .println
        (1 /\ 2 /\ 3 /\ Nil)
            .concat
            .i64_to_string
            .println
