(.) : A -> (A -> B) -> B forall {A, B} =
| a, f => f(a)

infixl 10 .

data Nil
data A /\ B forall { A, B }

infixr 5 /\

type List = Nil | A /\ List[A] forall { A }

interface ToString where
    to_string : Self -> String

to_string : String -> String = | a => a

list_to_string_rec : List[A] -> String forall { A : ToString } =
    | Nil => ""
    | h /\ t => ", " <> h.to_string <> t.list_to_string_rec

to_string : List[A] -> String forall { A : ToString } =
    | Nil => "[]"
    | h /\ t => "[" <> h.to_string <> t.list_to_string_rec <> "]"

puts : A -> () forall { A : ToString } =
    | a => a.to_string.println

interface Map where
    map : Self[A] -> (A -> B) -> Self[B] forall { A, B }

map : List[A] -> (A -> B) -> List[B] forall { A, B } =
    | Nil, _ => Nil
    | h /\ t, f => h.f /\ t.map(f)

interface Flatten where
    flatten : Self[Self[A]] -> Self[A] forall { A }

append : List[A] -> List[A] -> List[A] forall { A } =
    | Nil, ys => ys
    | h /\ t, ys => h /\ t.append(ys)

flatten : List[List[A]] -> List[A] forall { A } =
    | Nil => Nil
    | h /\ t => h.append(t.flatten)

flat_map : F[A] -> (A -> F[B]) -> F[B] forall { F: Map & Flatten, A, B } =
    | x, f => x.map(f).flatten

data D1
data D2

to_string : (D1 | D2) -> String =
    | D1 => "D1"
    | D2 => "D2"

type PalindromePlus = L | (D1 /\ L) |
    (D2 /\ L) | (D1 /\ PalindromePlus[D1 /\ L]) |
    (D2 /\ PalindromePlus[D2 /\ L]) forall { L }

type Palindrome = PalindromePlus[Nil]

main : () -> () =
    | () => do
        l = (D1 /\ D2 /\ Nil)
        ls = ((do (l? /\ l? /\ l? /\ l? /\ l? /\ l? /\ Nil) /\ Nil) : List[List[D1 | D2]])
        ls.map(
            | l : Palindrome => (l.to_string <> " palindrome!").puts
            | l => l.puts
        )
        ()

