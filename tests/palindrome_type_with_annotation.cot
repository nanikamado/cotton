infixl 10 .
infixr 5 /\

interface ToString where
    to_string : Self -> String

interface Map where
    map : Self[A] -> (A -> B) -> Self[B] forall { A, B }

interface Flatten where
    flatten : Self[Self[A]] -> Self[A] forall { A }

data D1
data D2

to_string : (D1 | D2) -> String =
    | D1 => "D1"
    | D2 => "D2"

type PalindromePlus = L | (D1 /\ L) |
    (D2 /\ L) | (D1 /\ PalindromePlus[D1 /\ L]) |
    (D2 /\ PalindromePlus[D2 /\ L]) forall { L }

type Palindrome = PalindromePlus[Nil]

main : () -> () =
    | () => do
        l = (D1 /\ D2 /\ Nil)
        ls = ((do (l? /\ l? /\ l? /\ l? /\ l? /\ l? /\ Nil) /\ Nil) : List[List[D1 | D2]])
        ls.map(
            | l : Palindrome => (l.to_string <> " palindrome!").puts
            | l => l.puts
        )
        ()

