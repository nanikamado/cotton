data E
data T {
    value: A,
    left: Tree[A],
    right: Tree[A],
} forall { A }

type Tree = E | T[A] forall { A }

identity = | a => a

insert : Tree[I64] -> I64 -> Tree[I64] =
    | E, x => T { value: x, left: E, right: E }
    | T { value: v, left: l, right: r, identity: t }, x => (x < v /\ v < x).
        | True /\ _ => T { value: v, left: l.insert(x), right: r }
        | _ /\ True => T { value: v, left: l, right: r.insert(x) }
        | _ => t

contains : Tree[I64] -> I64 -> Bool =
    | E, _ => False
    | T { value: v, left: l, right: r }, x => (x < v /\ v < x).
        | True /\ _ => l.contains(x)
        | _ /\ True => r.contains(x)
        | _ => True

main =
    | () => do
        test0 = E.contains(0)
        test1 = E.insert(2).insert(4).insert(0).insert(0).insert(100).contains(0)
        test2 = E.insert(2).insert(4).insert(0).insert(0).insert(100).contains(3)
        (test0 /\ test1 /\ test2).
            | False /\ True /\ False => "ok"
            | _ => "ng"
        .println
