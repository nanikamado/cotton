#![no_implicit_prelude]
use prelude::(.)
use prelude::(++)
use prelude::to_string
use prelude::ToString
use prelude::println
use intrinsic::*

pub data Nil
pub data A /\ B forall { A, B }
pub infixr 3 /\
pub type List = | A => Nil | A /\ List[A]

list_to_string_rec : List[A] -> String forall { A : ToString } =
    | Nil => ""
    | h /\ t => ", " ++ h.to_string ++ t.list_to_string_rec

to_string : List[A] -> String forall { A : ToString } =
    | Nil => "[]"
    | h /\ t => "[" ++ h.to_string ++ t.list_to_string_rec ++ "]"

(++) : List[A] -> List[A] -> List[A] forall { A } =
    | Nil, ys => ys
    | h /\ t, ys => h /\ (t ++ ys)

map : List[A] -> (A -> B) -> List[B] forall { A, B } =
    | Nil, _ => Nil
    | h /\ t, f => h.f /\ t.map(f)

main : () -> () =
    | () => do
        (1 /\ 2 /\ 3 /\ 4 /\ Nil).map(| a => a * 100).println
