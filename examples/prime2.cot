($) : (a -> b) -> a -> b forall {a, b}
= | f, a => f(a)

infixr 0 $

data A .. B forall { A, B }

infixl 4 ..

pop =
    | a .. b => (a < b).
        | True => (a + 1)..b /\ a
        | False => ()

pop : Filter[I64..I64, I64 -> Bool]
    -> () | (Filter[I64..I64, I64 -> Bool] /\ I64) =
    | Filter(l, f) => l.pop.
        | () => ()
        | l2 /\ a => a.f.
            | True => Filter(l2, f) /\ a
            | False => Filter(l2, f).pop

all : I64..I64 -> (I64 -> Bool) -> Bool =
    | i, f => i.pop.
        | () => True
        | i2 /\ a => a.f.
            | True => i2.all(f)
            | False => False

is_prime
= | n => (2..n - 1).all $
    | i => n % i != 0

each : Filter[I64..I64, I64 -> Bool]
    -> (I64 -> ()) -> () =
    | l, f => l.pop.
        | () => ()
        | l2 /\ a => do
            a.f
            l2.each(f)

data Filter(A, B) forall { A, B }

filter = | l, f => Filter(l, f)

main : () -> () =
    | () => (2..100).filter(is_prime).each $
        | n => n.i64_to_string.println
