data D1
data D2

to_string : (D1 | D2) -> String =
    | D1 => "D1"
    | D2 => "D2"

type PalindromePlus = L | (D1 /\ L) |
    (D2 /\ L) | (D1 /\ PalindromePlus[D1 /\ L]) |
    (D2 /\ PalindromePlus[D2 /\ L]) forall { L }

type Palindrome = PalindromePlus[Nil]

test : () -> () =
    | () => do
        Nil : Palindrome
        (D1 /\ Nil) : Palindrome
        (D1 /\ D1 /\ Nil) : Palindrome
        (D1 /\ D2 /\ D1 /\ Nil) : Palindrome
        (D1 /\ D2 /\ D2 /\ D1 /\ Nil) : Palindrome
        (D1 /\ D2 /\ D2 /\ D2 /\ D1 /\ Nil) : Palindrome
        (D1 /\ D2 /\ D1 /\ D2 /\ D1 /\ Nil) : Palindrome
        ()

make_palindrome_rec : List[D1 | D2] -> A -> PalindromePlus[A] forall { A } =
    | D1 /\ t, l => D1 /\ make_palindrome_rec(t, D1 /\ l)
    | D2 /\ t, l => D2 /\ make_palindrome_rec(t, D2 /\ l)
    | Nil, l => l

make_palindrome  : List[D1 | D2] -> Palindrome =
    | l => l.make_palindrome_rec(Nil)

main : () -> () =
    | () => do
        l = (D1 /\ D2 /\ Nil)
        ls = (do (l? /\ l? /\ l? /\ l? /\ l? /\ l? /\ Nil) /\ Nil)
        ls.map(
            | l : Palindrome => (l.to_string ++ " palindrome!").println
            | l => l.println
        )
        ()
