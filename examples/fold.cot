(.) : A -> (A -> B) -> B forall {A, B} =
    | a, f => f(a)

infixl 10 .

data A /\ B forall { A, B }

infixr 3 /\

type List = () | (A /\ List[A]) forall { A }

fold : List[A] -> B -> (B -> A -> B) -> B forall { A, B } =
    | (), init, _ => init
    | h /\ t, init, f => t.fold(init.f(h), f)

main : () -> () =
    | () => do
        (1 /\ 2 /\ 3 /\ 4 /\ 5 /\ ())
            .fold(0, (+))
            .i64_to_string
            .println
        (1 /\ 2 /\ 3 /\ 4 /\ 5 /\ ())
            .fold(1, (*))
            .i64_to_string
            .println