#![no_implicit_prelude]

pub use intrinsic::*

pub (.) : A -> (A -> B) -> B forall { A, B } =
    | a, f => f(a)

pub infixl 10 .

pub (++) : String -> String -> String = append_str

pub infixl 4 ++

pub println_str : String -> () =
    | a => (a ++ "\n").print_str

pub println : A -> () forall { A : ToString } =
    | a => a.to_string.println_str

pub flat_map : F[A] -> (A -> F[B]) -> F[B] forall { F: Map & Flatten, A, B } =
    | x, f => x.map(f).flatten

pub interface ToString {
    to_string : Self -> String
}

pub interface Map {
    map : Self[A] -> (A -> B) -> Self[B] forall { A, B }
}

pub interface Flatten {
    flatten : Self[Self[A]] -> Self[A] forall { A }
}

pub to_string : I64 -> String = i64_to_string

pub to_string : String -> String = | a => a


pub data None
pub data Some(A) forall { A }
pub type Option = | A => None | Some[A]

pub to_string : Option[A] -> String forall { A : ToString } =
    | None => "None"
    | Some(a) => "Some(" ++ a.to_string ++ ")"

pub map : Option[A] -> (A -> B) -> Option[B] forall { A, B } =
    | None, _ => None
    | Some(a), f => Some(a.f)

pub flatten : Option[Option[A]] -> Option[A] forall { A } =
    | None => None
    | Some(None) => None
    | Some(Some(a)) => Some(a)


pub data Err(A) forall { A }
pub data Ok(A) forall { A }
pub type Result = | A, B => Ok[A] | Err[B]

pub to_string : Result[A, E] -> String forall { A : ToString, E : ToString } =
    | Ok(a) => "Ok(" ++ a.to_string ++ ")"
    | Err(e) => "Err(" ++ e.to_string ++ ")"

pub map : Result[A, C] -> (A -> B) -> Result[B, C] forall { A, B, C } =
    | Err(a), _ => Err(a)
    | Ok(a), f => Ok(a.f)

pub flatten : Result[Result[A, E], E] -> Result[A, E] forall { A, E } =
    | Ok(a) => a
    | Err(a) => Err(a)


pub data Nil
pub data A /\ B forall { A, B }
pub infixr 3 /\
pub type List = | A => Nil | A /\ List[A]

list_to_string_rec : List[A] -> String forall { A : ToString } =
    | Nil => ""
    | h /\ t => ", " ++ h.to_string ++ t.list_to_string_rec

pub to_string : List[A] -> String forall { A : ToString } =
    | Nil => "[]"
    | h /\ t => "[" ++ h.to_string ++ t.list_to_string_rec ++ "]"

pub map : List[A] -> (A -> B) -> List[B] forall { A, B } =
    | Nil, _ => Nil
    | h /\ t, f => h.f /\ t.map(f)

pub (++) : List[A] -> List[A] -> List[A] forall { A } =
    | Nil, ys => ys
    | h /\ t, ys => h /\ (t ++ ys)

pub flatten : List[List[A]] -> List[A] forall { A } =
    | Nil => Nil
    | h /\ t => h ++ t.flatten


pub type Bool = True | False

pub to_string : Bool -> String =
    | True => "True"
    | False => "False"
